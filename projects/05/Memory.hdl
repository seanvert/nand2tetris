// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
	// keyboard selector

	Or8Way (in=address[0..7], out=or1);
	Or8Way (in[0..4]=address[8..12], in[5..7]=false, out=or2);
	Or (a=or1, b=or2, out=outor);
	//	And (a=or1, b=or2, out=outor);
	Not (in=outor, out=notor);
	
	And (a=address[14], b=address[13], out=checkkey);
	And (a=checkkey, b=notor, out=keyboardselector);
	DMux (in=load, sel=keyboardselector, a=toramorscreen, b=keyboardactive);
	
	// ram or screen selector
	DMux (in=toramorscreen, sel=address[14], a=toram, b=toscreen);
	// data RAM
	RAM16K (in=in, load=toram, address=address[0..13], out=ram);
	// 8k screen chip
//	Add16 (a[0..12]=false, a[13]=true, a[14..15]=false, b[0..12]=address[0..12], b[13..15]=false, out[0..12]=screenaddress, out[13..15]=nothing);
	Screen (in=in, load=toscreen, address=address[0..12], out=screen);
	
	And (a=address[14], b=outor, out=screenselector);

	// ver se Ã© pro teclado
	Keyboard (out=keyboard);
	Mux16 (a=ram, b=screen, sel=address[14], out=outa);
	Mux16 (a=outa, b=keyboard, sel=keyboardselector, out=out);
//	Mux4Way16 (a=ram, b=screen, c=keyboard, d=false, sel[0]=screenselector, sel[1]=keyboardselector, out=out);


}
