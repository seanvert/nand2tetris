#+PROPERTY: header-args:sml :results verbatim :session smlnj :tangle vm.sml
* exceptions

#+begin_src sml
exception Error
exception segmentError
exception logicalError
exception stackopError
exception invalidPointerValue
#+end_src

#+RESULTS:

* datatypes: segment, arithmlogi, stackop, labelFlow, index, labelString, line

#+begin_src sml
datatype segment = Argument
				 | Local
				 | Static
				 | Constant
				 | This
				 | That
				 | Pointer
				 | Temp


datatype arithmlogi = Add
					| Sub
					| Neg
					| Eq
					| Gt
					| Lt
					| And
					| Or
					| Not


datatype stackop = Push
				 | Pop

datatype labelFlow = Label
				   | Goto
				   | Ifgoto

datatype index = Index of int

datatype labelString = LabelName of string
							  
datatype line = Operation of arithmlogi
			  | Memory of stackop * segment * index
			  | Labelop of labelFlow * labelString
			  | Empty


#+end_src

#+RESULTS:
#+begin_example
datatype segment
  = Argument | Constant | Local | Pointer | Static | Temp | That | This
datatype arithmlogi = Add | And | Eq | Gt | Lt | Neg | Not | Or | Sub
datatype stackop = Pop | Push
datatype labelFlow = Goto | Ifgoto | Label
datatype index = Index of int
datatype labelString = LabelName of string
datatype line
  = Empty
  | Labelop of labelFlow * labelString
  | Memory of stackop * segment * index
  | Operation of arithmlogi
#+end_example

* arguments

#+begin_src sml
val args = CommandLine.arguments()
val filename = hd (String.tokens (fn x => x = #".") (hd args))
(* placeholder só pra teste  *)
(* val filename = "asd" *)
#+end_src

* ☛ TODO read functions string -> string list
depois preciso ver se é melhor passar essa fromString antes ou depois
da fields
#+begin_src sml
fun removeComments (s : string) =
	case s of
		"\r\n" => NONE
	  | "\n" => NONE
	  | _ => SOME (hd (String.fields (fn x => x = #"/") s))
(* if substring (s, 0, 2) = "//" then NONE else SOME s *)

fun getTokens s =
	case s of
		NONE => []
	  | SOME s  => (let 
		  val SOME str = String.fromString s
	  in
		  String.tokens (fn x => x = #" ") str
	  end)

val remCommGetTokens = getTokens o removeComments

#+end_src

#+RESULTS:
: val removeComments = fn : string -> string option
: val getTokens = fn : string option -> string list
: val remCommGetTokens = fn : string -> string list

* functions string list -> line

** auxiliary functions

*** logical/arithmetic identifier

#+begin_src sml
fun logicalIdentifier s =
	case s of
		"add\r\n" => Add
	  | "sub\r\n" => Sub
	  | "neg\r\n" => Neg
	  | "eq\r\n" => Eq
	  | "gt\r\n" => Gt
	  | "lt\r\n" => Lt
	  | "and\r\n" => And
	  | "or\r\n" => Or
	  | "not\r\n" => Not
	  | _ => raise logicalError

#+end_src

#+RESULTS:
: val logicalIdentifier = fn : string -> arithmlogi

*** ☛ TODO memory identifier
colocar um erro e uma função auxiliar para mexer com esses
Int.fromString no programa inteiro. Acho que uma função com tipos de
erro diferente dependendo de onde foi passada a string seria uma boa.
fn : int OPTION -> string -> string
algo nessas linhas.

#+begin_src sml
fun segmentIdentifier s =
	case s of
		"argument" => Argument (* RAM [2] POINTER *)
	  | "local" => Local (* RAM [1] POINTER *)
	  | "static" => Static (* STARTS AT RAM [16] *)
	  | "constant" => Constant (* VIRTUAL *)
	  | "this" => This (* RAM [3] POINTER *)
	  | "that" => That (* RAM [4] POINTER *)
	  | "pointer" => Pointer
	  | "temp" => Temp (* RAM [5-12] CONTENTS *)
	  | _ => raise segmentError


fun memOperations (q, w, e) =
	let
		val SOME i = Int.fromString e
		val s = segmentIdentifier w
	in
		case q of
			"push" => (Push, s, Index i)
		  | "pop" => (Pop, s, Index i)
		  | _ => raise stackopError
	end

#+end_src

#+RESULTS:
: stdIn:91.7-91.32 Warning: binding not exhaustive
:           SOME i = ...
: val segmentIdentifier = fn : string -> segment
: val memOperations = fn : string * string * string -> stackop * segment * index

*** label flow identifier

#+begin_src sml
fun readLabelFlow p1 p2 =
	let
		val _ = print ("LabelFlow: " ^ p1 ^ p2 ^ "\n")
	in
	case p1 of
		"label" => (Label, LabelName p2)
	  | "goto" => (Goto, LabelName p2)
	  | "if-goto" => (Ifgoto, LabelName p2)
	end
#+end_src

#+RESULTS:
: stdIn:370.2-373.41 Warning: match nonexhaustive
:           "label" => ...
:           "goto" => ...
:           "if-goto" => ...
:   
: val readLabelFlow = fn : string -> string -> labelFlow * labelString

** ☛ TODO main function
falta dar um jeito nisso e melhorar a maneira que ele escolhe as
operações. Por enquanto ele vai funcionar bem.
#+begin_src sml
fun operation (p : string list) =
	case p of
		(p1::[]) => Operation (logicalIdentifier p1)
	  | (p1::p2::p3::[]) => Memory (memOperations (p1, p2, p3))
	  | (p1::p2::[]) => Labelop (readLabelFlow p1 p2)
	  | _ => Empty

val getOperationsFromTokens = operation
#+end_src

#+RESULTS:
: val operation = fn : string list -> line
: val getOperationsFromTokens = fn : string list -> line

* write : line -> string

** ⚑ ESPERANDO init 

** ☛ TODO write label operations
esses nomes dos tipos das labels ficaram bem confusos, depois acho que
seria bom trocar.

#+begin_src sml
fun writeLabelops (label, LabelName s) =
	let
		fun aux str = 
			case str of
				[] => ""
			  | (x::xs) => (case x of
							   #"\n" => "" ^ (aux xs)
							 | #"\r" => "" ^ (aux xs)
							 | _ => (Char.toString x) ^ (aux xs))
		val str = aux (String.explode s)
	in
	case label of
		Label => "(" ^ str ^ ")"
	  | Goto => "@" ^ str ^ "\n\
	  \0;JMP\n"
	  | Ifgoto => "@SP\n\
	  \AM=M-1\n\
	  \D=M\n\
	  \@" ^ str ^ "\n\
	  \D;JEQ\n"
	end
		
#+end_src

#+RESULTS:
: val writeLabelops = fn : labelFlow * labelString -> string

** write mem operations

*** write push

#+begin_src sml
fun writePush seg (Index i)  =
	let
		val n = Int.toString i
		fun aux seg index = "@" ^ seg ^ "\n\
		\D=M\n\
		\@" ^ index ^ "\n\
		\A=D+A\n\
		\D=M\n\
		\@SP\n\
		\A=M\n\
		\M=D\n\
		\@SP\n\
		\M=M+1\n"

		fun auxPointer seg = "@" ^ seg ^ "\n\
		\D=M\n\
		\@SP\n\
		\A=M\n\
		\M=D\n\
		\@SP\n\
		\M=M+1\n"

		fun auxStaticTemp n x = "@" ^ Int.toString (n + x) ^ "\n\
		\D=M\n\
		\@SP\n\
		\A=M\n\
		\M=D\n\
		\@SP\n\
		\M=M+1\n"
	in
	case seg of
		Constant => "@" ^ n ^ "\n\
		\D=A\n\
		\@SP\n\
		\A=M\n\
		\M=D\n\
		\@SP\n\
		\M=M+1\n"
	  | Argument => aux "ARG" n
	  | Local => aux "LCL" n
	  | Static => auxStaticTemp i 16
	  | This => aux "THIS" n
	  | That => aux "THAT" n
	  | Pointer => (case i of
					   0 => auxPointer "THIS"
					 | 1 => auxPointer "THAT"
					 | _ => raise invalidPointerValue)
	  | Temp => auxStaticTemp i 5
	end
#+end_src

#+RESULTS:
: val writePush = fn : segment -> index -> string

*** write pop

#+begin_src sml
fun writePop seg (Index i) =
	let
		val n = Int.toString i
		fun aux seg index = "@" ^ seg ^ "\n\
		\D=M\n\
		\@" ^ index ^ "\n\
		\D=D+A\n\
		\@" ^ seg ^ index ^ "\n\
		\M=D\n\
		\@SP\n\
		\AM=M-1\n\
		\D=M\n\
		\@" ^ seg ^ index ^ "\n\
		\A=M\n\
		\M=D\n"

		fun auxPointer seg = "@SP\n\
		\AM=M-1\n\
		\D=M\n\
		\@" ^ seg ^ "\n\
		\M=D\n"

		fun auxStaticTemp n x = "@SP\n\
		\AM=M-1\n\
		\D=M\n\
		\@" ^ Int.toString (n + x) ^ "\n\
		\M=D\n"
	in
	case seg of
		Argument => aux "ARG" n
	  | Local => aux "LCL" n
	  | Static => auxStaticTemp i 16
	  | Constant => raise Error
	  | This => aux "THIS" n
	  | That => aux "THAT" n
	  | Pointer => (case i of
					   0 => auxPointer "THIS"
					 | 1 => auxPointer "THAT"
					 | _ => raise invalidPointerValue)
	  | Temp => auxStaticTemp i 5
	end
#+end_src

#+RESULTS:
: val writePop = fn : segment -> index -> string

*** main function

#+begin_src sml
fun writeStackMemOp s =
	case s of
		(Push, seg, ind) => writePush seg ind
	  | (Pop, seg, ind) => writePop seg ind
#+end_src

#+RESULTS:
: val writeStackMemOp = fn : stackop * segment * index -> string

** write arithmetic and logical operations

#+begin_src sml
 (* n é o número de linhas no código										  *)
fun writeLogArith operation n =
	let
		fun auxU s = "@SP\n\
		\A=M\n\
		\A=A-1\n\
		\M="^ s ^"\n"

		fun auxD s = "@SP\n\
		\AM=M-1\n\
		\D=M\n\
		\A=A-1\n" ^ s ^ "\n"

		fun auxC j1 j2 n =
			let
				val k = Int.toString n
			in
		"@SP\n\
		\A=M\n\
		\A=A-1\n\
		\D=M\n\
		\A=A-1\n\
		\D=M-D\n\
		\@SP\n\
		\M=M-1\n\
		\M=M-1\n\
		\@" ^ filename ^ "." ^ k ^ "A\n\
		\D;" ^ j1 ^ "\n\
		\@" ^ filename ^ "." ^ k ^ "B\n\
		\D;" ^ j2 ^ "\n\
		\(" ^ filename ^ "." ^ k ^ "A)\n\
		\@SP\n\
		\A=M\n\
		\M=-1\n\
		\@" ^ filename ^ "." ^ k ^ "\n\
		\0;JMP\n\
		\(" ^ filename ^ "." ^ k ^ "B)\n\
		\@SP\n\
		\A=M\n\
		\M=0\n\
		\(" ^ filename ^ "." ^ k ^ ")\n\
		\@SP\n\
		\M=M+1\n"
			end
	in
	case operation of
		Add => auxD "M=D+M"
	  | Sub => auxD "M=M-D"
	  | And => auxD "M=M&D"
	  | Or => auxD "M=M|D"
	  | Eq => auxC "JEQ" "JNE" n
	  | Gt => auxC "JGT" "JLE" n
	  | Lt => auxC "JLT" "JGE" n
	  | Not => auxU "!M"
	  | Neg => auxU "-M"
	end

#+end_src

#+RESULTS:
: val writeLogArith = fn : arithmlogi -> int -> string

** main function

#+begin_src sml
fun codeWriter line n =
	case line of
		Operation f => writeLogArith f n
	  | Memory s => writeStackMemOp s
	  | Labelop lop => writeLabelops lop
	  | Empty => "\n"

val getOperation = operation o remCommGetTokens

fun getLineWriteCode s n = codeWriter (getOperation s) n

#+end_src

#+RESULTS:
: val codeWriter = fn : line -> int -> string
: val getOperation = fn : string -> line
: val getLineWriteCode = fn : string -> int -> string

* ☛ TODO read stream, write stream
falta mexer em algumas coisas, passar o número de variáveis criadas
até então ao invés do número de linhas

#+begin_src sml
fun readfile (input, output) =
	let
		val instream = TextIO.openIn input
		val outstream = TextIO.openOut output
		val readline = TextIO.inputLine instream
		fun aux readline n =
			let
				(* val _ = print (Int.toString n) *)
			in
			case readline of
				NONE => (TextIO.closeIn instream; TextIO.closeOut outstream)
			  | SOME s => (TextIO.output(outstream, (getLineWriteCode s n)); aux (TextIO.inputLine instream) (n + 1))
			end
	in
		aux readline 0
	end

#+end_src

* exit success

#+begin_src sml
(* val _ = readfile ((hd args), filename ^ ".asm") *)
(* val _ = OS.Process.exit(OS.Process.success) *)
#+end_src

