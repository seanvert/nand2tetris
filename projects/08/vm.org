#+PROPERTY: header-args:sml :results verbatim :session smlnj :tangle vm.sml
* exceptions

#+begin_src sml
exception labelError
exception pushConstantError
exception segmentError
exception logicalError
exception stackopError
exception invalidPointerValue
exception functionOperationError
#+end_src

#+RESULTS:

* ☛ TODO datatypes: segment, arithmlogi, stackop, labelFlow, index, labelString, line
- trocar esse nome das labels também seria uma boa

** memory datatypes

#+begin_src sml
datatype stackop = Push
				 | Pop

datatype segment = Argument
				 | Local
				 | Static
				 | Constant
				 | This
				 | That
				 | Pointer
				 | Temp

datatype index = Index of int
#+end_src

#+RESULTS:
: datatype stackop = Pop | Push
: datatype segment
:   = Argument | Constant | Local | Pointer | Static | Temp | That | This
: datatype index = Index of int

** label datatypes

#+begin_src sml
datatype labelFlow = Label
				   | Goto
				   | Ifgoto

datatype labelString = LabelName of string


#+end_src

#+RESULTS:
: datatype labelFlow = Goto | Ifgoto | Label
: datatype labelString = LabelName of string

** function datatypes
#+begin_src sml
datatype functionName = Name of string

datatype functionArgs = Localargs of int

datatype functionOp = Declaration of functionName * functionArgs
					| Call of functionName * functionArgs
	   | Return
#+end_src

#+RESULTS:
: datatype functionName = Name of string
: datatype functionArgs = Localargs of int
: datatype functionOp
:   = Call of functionName * functionArgs
:   | Declaration of functionName * functionArgs
:   | Return

** arithmetic and logic datatypes
#+begin_src sml
datatype arithmlogi = Add
					| Sub
					| Neg
					| Eq
					| Gt
					| Lt
					| And
					| Or
					| Not
#+end_src

#+RESULTS:
: datatype arithmlogi = Add | And | Eq | Gt | Lt | Neg | Not | Or | Sub

** line datatype
#+begin_src sml
datatype line = Operation of arithmlogi
			  | Memory of stackop * segment * index
			  | Labelop of labelFlow * labelString
			  | FunctionCommand of functionOp
			  | Empty

#+end_src

#+RESULTS:
: datatype line
:   = Empty
:   | FunctionCommand of functionOp
:   | Labelop of labelFlow * labelString
:   | Memory of stackop * segment * index
:   | Operation of arithmlogi

* ☛ TODO arguments
match nonexhaustive na função getFilename
também precisa mudar a ordem pra ficar melhor com o final

#+begin_src sml
val args = CommandLine.arguments()
val parsedDirPathArgs = String.tokens (fn x => x = #"/") (hd args)

fun getFilename (p::ph) =
	case ph of
		[] => p
	  | _ => getFilename ph

val filenameExtension = getFilename parsedDirPathArgs
val filename = hd (String.tokens (fn x => x = #".") filenameExtension)
(* placeholder só pra teste  *)
(* val filename = "asd" *)
#+end_src

#+RESULTS:
: stdIn:755.5-758.25 Warning: match nonexhaustive
:           p :: ph => ...
:   
: 
: uncaught exception Empty

* read functions string -> string list

#+begin_src sml
fun removeComments (s : string) =
	let
		fun getStrFromLine str =
			case String.fromString str of
				NONE => ""
			  | SOME s => s
		val str = getStrFromLine s
	in
	case s of
		"\r\n" => NONE
	  | "\n" => NONE
	  | _ => SOME (hd (String.fields (fn x => x = #"/") str))
	end
(* if substring (s, 0, 2) = "//" then NONE else SOME s *)

fun getTokens s =
	case s of
		NONE => []
	  | SOME s  => String.tokens (fn x => x = #" ") s

val remCommGetTokens = getTokens o removeComments

#+end_src

#+RESULTS:
: val removeComments = fn : string -> string option
: val getTokens = fn : string option -> string list
: val remCommGetTokens = fn : string -> string list

* functions string list -> line

** auxiliary functions

*** logical/arithmetic identifier

#+begin_src sml
fun logicalIdentifier s =
	case s of
		"add" => Add
	  | "sub" => Sub
	  | "neg" => Neg
	  | "eq" => Eq
	  | "gt" => Gt
	  | "lt" => Lt
	  | "and" => And
	  | "or" => Or
	  | "not" => Not
	  | _ => raise logicalError

#+end_src

#+RESULTS:
: stdIn:796.15-796.18 Error: unbound variable or constructor: Not
: stdIn:795.14-795.16 Error: unbound variable or constructor: Or
: stdIn:794.15-794.18 Error: unbound variable or constructor: And
: stdIn:793.14-793.16 Error: unbound variable or constructor: Lt
: stdIn:792.14-792.16 Error: unbound variable or constructor: Gt
: stdIn:791.14-791.16 Error: unbound variable or constructor: Eq
: stdIn:790.15-790.18 Error: unbound variable or constructor: Neg
: stdIn:789.15-789.18 Error: unbound variable or constructor: Sub

*** ☛ TODO memory identifier
colocar um erro e uma função auxiliar para mexer com esses
Int.fromString no programa inteiro. Acho que uma função com tipos de
erro diferente dependendo de onde foi passada a string seria uma boa.
fn : int OPTION -> string -> string
algo nessas linhas.

#+begin_src sml
fun segmentIdentifier s =
	let
		val _ = print s
	in
	case s of
		"argument" => Argument (* RAM [2] POINTER *)
	  | "local" => Local (* RAM [1] POINTER *)
	  | "static" => Static (* STARTS AT RAM [16] *)
	  | "constant" => Constant (* VIRTUAL *)
	  | "this" => This (* RAM [3] POINTER *)
	  | "that" => That (* RAM [4] POINTER *)
	  | "pointer" => Pointer
	  | "temp" => Temp (* RAM [5-12] CONTENTS *)
	  | _ => raise segmentError
	end

fun pushOrPop str =
	case str of
		"push" => SOME Push
	  | "pop" => SOME Pop
	  | _ => NONE

fun memOperations (q, w, e) =
	let
		val SOME i = Int.fromString e
		val s = segmentIdentifier w
	in
		case q of
			Push => (Push, s, Index i)
		  | Pop => (Pop, s, Index i)
	end

#+end_src

#+RESULTS:
#+begin_example
stdIn:810.16-810.20 Error: unbound variable or constructor: Temp
stdIn:809.19-809.26 Error: unbound variable or constructor: Pointer
stdIn:808.16-808.20 Error: unbound variable or constructor: That
stdIn:807.16-807.20 Error: unbound variable or constructor: This
stdIn:806.20-806.28 Error: unbound variable or constructor: Constant
stdIn:805.18-805.24 Error: unbound variable or constructor: Static
stdIn:804.17-804.22 Error: unbound variable or constructor: Local
stdIn:803.17-803.25 Error: unbound variable or constructor: Argument
stdIn:817.20-817.23 Error: unbound variable or constructor: Pop
stdIn:816.18-816.22 Error: unbound variable or constructor: Push
stdIn:827.23-827.28 Error: unbound variable or constructor: Index
#+end_example

*** label flow identifier

#+begin_src sml
fun readLabelFlow p1 p2 =
	let
		val _ = print ("LabelFlow: " ^ p1 ^ p2 ^ "\n")
	in
	case p1 of
		"label" => (Label, LabelName p2)
	  | "goto" => (Goto, LabelName p2)
	  | "if-goto" => (Ifgoto, LabelName p2)
	  | _ => raise labelError
	end
#+end_src

#+RESULTS:
: stdIn:836.28-836.37 Error: unbound variable or constructor: LabelName
: stdIn:836.20-836.26 Error: unbound variable or constructor: Ifgoto
: stdIn:835.23-835.32 Error: unbound variable or constructor: LabelName
: stdIn:835.17-835.21 Error: unbound variable or constructor: Goto
: stdIn:834.22-834.31 Error: unbound variable or constructor: LabelName

*** ☛ TODO function operations identifier
not exhaustive

#+begin_src sml
fun functionOperations command function kargs =
	let
		val SOME fname = String.fromString function
		val SOME args = Int.fromString kargs
	in
	case command of
		"call" => Call (Name fname, Localargs args)
	  | "function" => Declaration (Name fname, Localargs args)
	  | "return" => Return
	  | _ => raise functionOperationError
	end
#+end_src

#+RESULTS:
: stdIn:847.18-847.24 Error: unbound variable or constructor: Return
: stdIn:846.20-846.31 Error: unbound variable or constructor: Declaration
: stdIn:846.45-846.54 Error: unbound variable or constructor: Localargs
: stdIn:846.33-846.37 Error: unbound variable or constructor: Name
: stdIn:845.13-845.17 Error: unbound variable or constructor: Call
: stdIn:845.31-845.40 Error: unbound variable or constructor: Localargs

** ⚑ ESPERANDO main function
falta dar um jeito nisso e melhorar a maneira que ele escolhe as
operações. Por enquanto ele vai funcionar bem.

aqui ele vai pegar options agora. acho que é melhor checar as
operações de memória primeiro e as funções depois
#+begin_src sml
fun operation (p : string list) =
	case p of
		(p1::[]) => Operation (logicalIdentifier p1)
	  | (p1::p2::p3::[]) => (case pushOrPop p1 of
								SOME Push => Memory (memOperations (Push, p2, p3))
							  | SOME Pop => Memory (memOperations (Pop, p2, p3))
							  | NONE => FunctionCommand (functionOperations (p1, p2, p3)))
	  | (p1::p2::[]) => Labelop (readLabelFlow p1 p2)
	  | _ => Empty

val getOperationsFromTokens = operation
#+end_src

#+RESULTS:
#+begin_example
stdIn:857.22-857.29 Error: unbound variable or constructor: Labelop
stdIn:857.31-857.44 Error: unbound variable or constructor: readLabelFlow
stdIn:853.32-853.41 Error: unbound variable or constructor: pushOrPop
stdIn:856.20-856.35 Error: unbound variable or constructor: FunctionCommand
stdIn:856.37-856.55 Error: unbound variable or constructor: functionOperations
stdIn:855.24-855.30 Error: unbound variable or constructor: Memory
stdIn:855.32-855.45 Error: unbound variable or constructor: memOperations
stdIn:854.22-854.28 Error: unbound variable or constructor: Memory
stdIn:854.30-854.43 Error: unbound variable or constructor: memOperations
stdIn:852.15-852.24 Error: unbound variable or constructor: Operation
#+end_example

* write : line -> string

** ⚑ ESPERANDO init 

** ☛ TODO write label operations
esses nomes dos tipos das labels ficaram bem confusos, depois acho que
seria bom trocar.

#+begin_src sml
fun writeLabelops (label, LabelName str) =
	case label of
		Label => "(" ^ str ^ ")\n"
	  | Goto => "@" ^ str ^ "\n\
	  \0;JMP\n"
	  | Ifgoto => "@SP\n\
	  \AM=M-1\n\
	  \D=M\n\
	  \@" ^ str ^ "\n\
	  \D;JNE\n"
		
#+end_src

#+RESULTS:
#+begin_example
stdIn:830.1-851.6 Error: non-constructor applied to argument in pattern: LabelName
stdIn:863.12-863.29 Error: operator and operand do not agree [tycon mismatch]
  operator domain: string * string
  operand:         string * (char -> string)
  in expression:
    "(" ^ str
stdIn:864.14-865.13 Error: operator and operand do not agree [tycon mismatch]
  operator domain: string * string
  operand:         string * (char -> string)
  in expression:
    "@" ^ str
stdIn:869.4-870.13 Error: operator and operand do not agree [tycon mismatch]
  operator domain: string * string
  operand:         string * (char -> string)
  in expression:
#+end_example

** write mem operations

*** ☛ TODO write push
dá pra mexer na parte final do código de assembly e deixar o código
mais enxuto
#+begin_src sml
fun writePush seg (Index i)  =
	let
		val n = Int.toString i
		fun aux seg index = "@" ^ seg ^ "\n\
		\D=M\n\
		\@" ^ index ^ "\n\
		\A=D+A\n\
		\D=M\n\
		\@SP\n\
		\A=M\n\
		\M=D\n\
		\@SP\n\
		\M=M+1\n"

		fun auxPointer seg = "@" ^ seg ^ "\n\
		\D=M\n\
		\@SP\n\
		\A=M\n\
		\M=D\n\
		\@SP\n\
		\M=M+1\n"

		fun auxStaticTemp n x = "@" ^ Int.toString (n + x) ^ "\n\
		\D=M\n\
		\@SP\n\
		\A=M\n\
		\M=D\n\
		\@SP\n\
		\M=M+1\n"
	in
	case seg of
		Constant => "@" ^ n ^ "\n\
		\D=A\n\
		\@SP\n\
		\A=M\n\
		\M=D\n\
		\@SP\n\
		\M=M+1\n"
	  | Argument => aux "ARG" n
	  | Local => aux "LCL" n
	  | Static => auxStaticTemp i 16
	  | This => aux "THIS" n
	  | That => aux "THAT" n
	  | Pointer => (case i of
					   0 => auxPointer "THIS"
					 | 1 => auxPointer "THAT"
					 | _ => raise invalidPointerValue)
	  | Temp => auxStaticTemp i 5
	end
#+end_src

#+RESULTS:
: stdIn:1.21-830.1 Error: non-constructor applied to argument in pattern: Index
: stdIn:873.24 Error: unbound variable or constructor: i
: stdIn:918.28 Error: unbound variable or constructor: i
: stdIn:914.23 Error: unbound variable or constructor: i

*** ☛ TODO write pop
mesma coisa, acho que seria uma boa coloca uma string que é só para
pegar o ponteiro da stack e puxar o valor
#+begin_src sml
fun writePop seg (Index i) =
	let
		val n = Int.toString i
		fun aux seg index = "@" ^ seg ^ "\n\
		\D=M\n\
		\@" ^ index ^ "\n\
		\D=D+A\n\
		\@" ^ seg ^ index ^ "\n\
		\M=D\n\
		\@SP\n\
		\AM=M-1\n\
		\D=M\n\
		\@" ^ seg ^ index ^ "\n\
		\A=M\n\
		\M=D\n"

		fun auxPointer seg = "@SP\n\
		\AM=M-1\n\
		\D=M\n\
		\@" ^ seg ^ "\n\
		\M=D\n"

		fun auxStaticTemp n x = "@SP\n\
		\AM=M-1\n\
		\D=M\n\
		\@" ^ Int.toString (n + x) ^ "\n\
		\M=D\n"
	in
	case seg of
		Argument => aux "ARG" n
	  | Local => aux "LCL" n
	  | Static => auxStaticTemp i 16
	  | Constant => raise pushConstantError
	  | This => aux "THIS" n
	  | That => aux "THAT" n
	  | Pointer => (case i of
					   0 => auxPointer "THIS"
					 | 1 => auxPointer "THAT"
					 | _ => raise invalidPointerValue)
	  | Temp => auxStaticTemp i 5
	end
#+end_src

#+RESULTS:
: stdIn:1.20-702.5 Error: non-constructor applied to argument in pattern: Index
: stdIn:922.24 Error: unbound variable or constructor: i
: stdIn:959.28 Error: unbound variable or constructor: i
: stdIn:955.23 Error: unbound variable or constructor: i

*** main function

#+begin_src sml
fun writeStackMemOp s =
	case s of
		(Push, seg, ind) => writePush seg ind
	  | (Pop, seg, ind) => writePop seg ind
#+end_src

#+RESULTS:
: stdIn:964.25-964.33 Error: unbound variable or constructor: writePop

** write arithmetic and logical operations

#+begin_src sml
 (* n é o número de linhas no código										  *)
fun writeLogArith operation n =
	let
		fun auxU s = "@SP\n\
		\A=M\n\
		\A=A-1\n\
		\M="^ s ^"\n"

		fun auxD s = "@SP\n\
		\AM=M-1\n\
		\D=M\n\
		\A=A-1\n" ^ s ^ "\n"

		fun auxC j1 j2 n =
			let
				val k = Int.toString n
			in
		"@SP\n\
		\A=M\n\
		\A=A-1\n\
		\D=M\n\
		\A=A-1\n\
		\D=M-D\n\
		\@SP\n\
		\M=M-1\n\
		\M=M-1\n\
		\@" ^ filename ^ "." ^ k ^ "A\n\
		\D;" ^ j1 ^ "\n\
		\@" ^ filename ^ "." ^ k ^ "B\n\
		\D;" ^ j2 ^ "\n\
		\(" ^ filename ^ "." ^ k ^ "A)\n\
		\@SP\n\
		\A=M\n\
		\M=-1\n\
		\@" ^ filename ^ "." ^ k ^ "\n\
		\0;JMP\n\
		\(" ^ filename ^ "." ^ k ^ "B)\n\
		\@SP\n\
		\A=M\n\
		\M=0\n\
		\(" ^ filename ^ "." ^ k ^ ")\n\
		\@SP\n\
		\M=M+1\n"
			end
	in
	case operation of
		Add => auxD "M=D+M"
	  | Sub => auxD "M=M-D"
	  | And => auxD "M=M&D"
	  | Or => auxD "M=M|D"
	  | Eq => auxC "JEQ" "JNE" n
	  | Gt => auxC "JGT" "JLE" n
	  | Lt => auxC "JLT" "JGE" n
	  | Not => auxU "!M"
	  | Neg => auxU "-M"
	end

#+end_src

#+RESULTS:
: stdIn:1005.9-1005.17 Error: unbound variable or constructor: filename
: stdIn:1001.9-1001.17 Error: unbound variable or constructor: filename
: stdIn:999.9-999.17 Error: unbound variable or constructor: filename
: stdIn:995.9-995.17 Error: unbound variable or constructor: filename
: stdIn:993.9-993.17 Error: unbound variable or constructor: filename

** ⚑ ESPERANDO main function
function calling protocol precisa implemenar

também está faltando implementar o contador de variáveis
#+begin_src sml
fun codeWriter line n =
	case line of
		Operation f => writeLogArith f n
	  | Memory s => writeStackMemOp s
	  | Labelop lop => writeLabelops lop
	  | Empty => "\n"

val getOperation = operation o remCommGetTokens

fun getLineWriteCode s n = codeWriter (getOperation s) n

#+end_src

#+RESULTS:
: stdIn:1025.6-1025.17 Error: non-constructor applied to argument in pattern: Labelop
: stdIn:1025.21-1025.34 Error: unbound variable or constructor: writeLabelops
: stdIn:1025.35-1025.38 Error: unbound variable or constructor: lop
: stdIn:1024.6-1024.14 Error: non-constructor applied to argument in pattern: Memory
: stdIn:1024.18-1024.33 Error: unbound variable or constructor: writeStackMemOp
: stdIn:1024.34 Error: unbound variable or constructor: s
: stdIn:1023.3-1023.14 Error: non-constructor applied to argument in pattern: Operation
: stdIn:1023.18-1023.31 Error: unbound variable or constructor: writeLogArith
: stdIn:1023.32 Error: unbound variable or constructor: f

* ☛ TODO read stream, write stream
falta mexer em algumas coisas, passar o número de variáveis criadas
até então ao invés do número de linhas

#+begin_src sml
fun readfile (input, output) =
	let
		val instream = TextIO.openIn input
		val outstream = TextIO.openOut output
		val readline = TextIO.inputLine instream
		fun aux readline n =
			let
				(* val _ = print (Int.toString n) *)
			in
			case readline of
				NONE => (TextIO.closeIn instream; TextIO.closeOut outstream)
			  | SOME s => (TextIO.output(outstream, (getLineWriteCode s n)); aux (TextIO.inputLine instream) (n + 1))
			end
	in
		aux readline 0
	end

#+end_src

#+RESULTS:
: stdIn:1042.45-1042.61 Error: unbound variable or constructor: getLineWriteCode

* ☛ TODO exit success
adicionar a output com o path correto
mexer na primeira função pra ficar melhor

#+begin_src sml
val filePath = hd (String.tokens (fn x => x = #".") (hd args))
(* val _ print hd parsedDirPathArgs *)
val _ = readfile ((hd args), filePath ^ ".asm")
val _ = OS.Process.exit(OS.Process.success)
#+end_src

#+RESULTS:
: stdIn:1033.21-1033.25 Error: unbound variable or constructor: args
: stdIn:1049.9-1049.17 Error: unbound variable or constructor: readfile

