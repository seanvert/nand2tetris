#+PROPERTY: header-args:sml :results verbatim :session smlnj :tangle vm.sml
* exceptions

#+begin_src sml
exception labelError
exception pushConstantError
exception segmentError
exception logicalError
exception stackopError
exception invalidPointerValue
exception functionOperationError
#+end_src

#+RESULTS:

* ☛ TODO datatypes: segment, arithmlogi, stackop, labelFlow, index, labelString, line
- trocar esse nome das labels também seria uma boa

** memory datatypes

#+begin_src sml
datatype stackop = Push
				 | Pop

datatype segment = Argument
				 | Local
				 | Static
				 | Constant
				 | This
				 | That
				 | Pointer
				 | Temp

datatype index = Index of int

#+end_src

#+RESULTS:
: datatype stackop = Pop | Push
: datatype segment
:   = Argument | Constant | Local | Pointer | Static | Temp | That | This
: datatype index = Index of int

** label datatypes

#+begin_src sml
datatype labelFlow = Label
				   | Goto
				   | Ifgoto

datatype labelString = LabelName of string

#+end_src

#+RESULTS:
: datatype labelFlow = Goto | Ifgoto | Label
: datatype labelString = LabelName of string

** function datatypes
#+begin_src sml
datatype functionName = Name of string

datatype functionArgs = Localargs of int

datatype functionOp = Declaration of functionName * functionArgs
					| Call of functionName * functionArgs
	   | Return
#+end_src

#+RESULTS:
: datatype functionName = Name of string
: datatype functionArgs = Localargs of int
: datatype functionOp
:   = Call of functionName * functionArgs
:   | Declaration of functionName * functionArgs
:   | Return

** arithmetic and logic datatypes
#+begin_src sml
datatype arithmlogi = Add
					| Sub
					| Neg
					| Eq
					| Gt
					| Lt
					| And
					| Or
					| Not
#+end_src

#+RESULTS:
: datatype arithmlogi = Add | And | Eq | Gt | Lt | Neg | Not | Or | Sub

** line datatype
#+begin_src sml
datatype line = Operation of arithmlogi
			  | Memory of stackop * segment * index
			  | Labelop of labelFlow * labelString
			  | FunctionCommand of functionOp
			  | Empty

#+end_src

#+RESULTS:
: datatype line
:   = Empty
:   | FunctionCommand of functionOp
:   | Labelop of labelFlow * labelString
:   | Memory of stackop * segment * index
:   | Operation of arithmlogi

* ⚑ ESPERANDO arguments
- também precisa mudar a ordem pra ficar melhor com o final
OS.Path.fromString "/home/sean/nand2tetris/vm.asd";

#+begin_src sml
(* parte que vai pegar o path *)
(* val args = CommandLine.arguments() *)
val args = ["/home/sean/nand2tetris/projects/08/FunctionCalls/SimpleFunction/SimpleFunction.vm"]
val vmdir = ["/home/sean/nand2tetris/projects/08/FunctionCalls/FibonacciElement/"]

fun getAllVmFiles path =
	let
		val dirStream = OS.FileSys.openDir path
		fun aux dstream list = 
			case OS.FileSys.readDir dstream of
				NONE => list
			  | SOME f => (case #ext (OS.Path.splitBaseExt f) of
							  NONE => aux dstream list
							| SOME "vm" => aux dstream (f::list)
							| SOME _ => aux dstream list)
	in
		aux dirStream []
	end

fun openFiles path =
	let
		val isDir = OS.FileSys.isDir (hd args)
	in
		case isDir of
			true => getAllVmFiles path
		  | false => (let
						 val {dir, file} = OS.Path.splitDirFile (hd args)
					 in
						 [file]
					 end)
	end

val {dir, file} = OS.Path.splitDirFile (hd args)

(* colocar alguma coisa aqui pra ver se é um diretório *)
val filename = hd (String.tokens (fn x => x = #".") file)

#+end_src

#+RESULTS:
#+begin_example
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val args =
  ["/home/sean/nand2tetris/projects/08/FunctionCalls/SimpleFunction/Simple#"]
  : string list
val vmdir =
  ["/home/sean/nand2tetris/projects/08/FunctionCalls/FibonacciElement/"]
  : string list
val getAllVmFiles = fn : string -> string list
val openFiles = fn : string -> string list
val dir = "/home/sean/nand2tetris/projects/08/FunctionCalls/SimpleFunction"
  : string
val file = "SimpleFunction.vm" : string
val filename = "SimpleFunction" : string
#+end_example

* read functions string -> string list

#+begin_src sml
fun removeComments (s : string) =
	let
		fun getStrFromLine str =
			case String.fromString str of
				NONE => ""
			  | SOME s => s
		val str = getStrFromLine s
	in
	case s of
		"\r\n" => NONE
	  | "\n" => NONE
	  | _ => SOME (hd (String.fields (fn x => x = #"/") str))
	end
(* if substring (s, 0, 2) = "//" then NONE else SOME s *)

fun getTokens s =
	case s of
		NONE => []
	  | SOME s  => String.tokens (fn x => x = #" ") s

val remCommGetTokens = getTokens o removeComments

#+end_src

#+RESULTS:
: val removeComments = fn : string -> string option
: val getTokens = fn : string option -> string list
: val remCommGetTokens = fn : string -> string list

* functions string list -> line
** logical/arithmetic identifier  fn : string -> arithmlogi

#+begin_src sml
fun logicalIdentifier s =
	case s of
		"add" => Add
	  | "sub" => Sub
	  | "neg" => Neg
	  | "eq" => Eq
	  | "gt" => Gt
	  | "lt" => Lt
	  | "and" => And
	  | "or" => Or
	  | "not" => Not
	  | _ => raise logicalError

#+end_src

#+RESULTS:
: val logicalIdentifier = fn : string -> arithmlogi

** ☛ TODO memory identifier
colocar um erro e uma função auxiliar para mexer com esses
Int.fromString no programa inteiro. Acho que uma função com tipos de
erro diferente dependendo de onde foi passada a string seria uma boa.
fn : int OPTION -> string -> string
algo nessas linhas.

#+begin_src sml
fun segmentIdentifier s =
	let
		val _ = print s
	in
	case s of
		"argument" => Argument (* RAM [2] POINTER *)
	  | "local" => Local (* RAM [1] POINTER *)
	  | "static" => Static (* STARTS AT RAM [16] *)
	  | "constant" => Constant (* VIRTUAL *)
	  | "this" => This (* RAM [3] POINTER *)
	  | "that" => That (* RAM [4] POINTER *)
	  | "pointer" => Pointer
	  | "temp" => Temp (* RAM [5-12] CONTENTS *)
	  | _ => raise segmentError
	end

fun pushOrPop str =
	case str of
		"push" => SOME Push
	  | "pop" => SOME Pop
	  | _ => NONE

fun memOperations (q, w, e) =
	let
		val SOME i = Int.fromString e
		val s = segmentIdentifier w
	in
		case q of
			Push => (Push, s, Index i)
		  | Pop => (Pop, s, Index i)
	end

#+end_src

#+RESULTS:
: stdIn:149.7-149.32 Warning: binding not exhaustive
:           SOME i = ...
: val segmentIdentifier = fn : string -> segment
: val pushOrPop = fn : string -> stackop option
: val memOperations = fn
:   : stackop * string * string -> stackop * segment * index

** label flow identifier  fn : string -> string -> labelFlow * labelString

#+begin_src sml
fun readLabelFlow p1 p2 =
	case p1 of
		"label" => (Label, LabelName p2)
	  | "goto" => (Goto, LabelName p2)
	  | "if-goto" => (Ifgoto, LabelName p2)
	  | _ => raise labelError

#+end_src

#+RESULTS:
: val readLabelFlow = fn : string -> string -> labelFlow * labelString

** ☛ TODO function operations identifier
not exhaustive

#+begin_src sml
fun functionOperations command function kargs =
	let
		val SOME fname = String.fromString function
		val SOME args = Int.fromString kargs
	in
	case command of
		"call" => Call (Name fname, Localargs args)
	  | "function" => Declaration (Name fname, Localargs args)
	  | _ => raise functionOperationError
	end

fun functionReturn str =
	case str of
		"return" => SOME Return
	  | _ => NONE

#+end_src

#+RESULTS:
: stdIn:167.7-167.39 Warning: binding not exhaustive
:           SOME args = ...
: stdIn:166.7-166.46 Warning: binding not exhaustive
:           SOME fname = ...
: val functionOperations = fn : string -> string -> string -> functionOp
: val functionReturn = fn : string -> functionOp option

** ☛ TODO main function
falta dar um jeito nisso e melhorar a maneira que ele escolhe as
operações. Por enquanto ele vai funcionar bem.

non exhaustive
#+begin_src sml
fun operation (p : string list) =
	case p of
		(p1::[]) => (case functionReturn p1 of
						 SOME Return => FunctionCommand Return
					   | NONE => Operation (logicalIdentifier p1))
	  | (p1::p2::p3::[]) => (case pushOrPop p1 of
								SOME Push => Memory (memOperations (Push, p2, p3))
							  | SOME Pop => Memory (memOperations (Pop, p2, p3))
							  | NONE => FunctionCommand (functionOperations p1 p2 p3))
	  | (p1::p2::[]) => Labelop (readLabelFlow p1 p2)
	  | _ => Empty

val getOperationsFromTokens = operation
#+end_src

#+RESULTS:
: stdIn:182.16-184.51 Warning: match nonexhaustive
:           SOME Return => ...
:           NONE => ...
:   
: val operation = fn : string list -> line
: val getOperationsFromTokens = fn : string list -> line

* write : line -> string

** ⚑ ESPERANDO init 
- call sys.init
#+begin_src sml

#+end_src

#+RESULTS:
: val it = "stdIn" : string

** ☛ TODO write label operations fn : labelFlow * labelString -> string
esses nomes dos tipos das labels ficaram bem confusos, depois acho que
seria bom trocar.

#+begin_src sml
fun writeLabelops (label, LabelName str) =
	case label of
		Label => "(" ^ str ^ ")\n"
	  | Goto => "@" ^ str ^ "\n\
	  \0;JMP\n"
	  | Ifgoto => "@SP\n\
	  \AM=M-1\n\
	  \D=M\n\
	  \@" ^ str ^ "\n\
	  \D;JNE\n"
		
#+end_src

#+RESULTS:
: val writeLabelops = fn : labelFlow * labelString -> string

** write mem operations

*** write push  fn : segment -> index -> string
#+begin_src sml
fun writePush seg (Index i)  =
	let
		val putDRegisterInTheStack = "@SP\n\
		\A=M\n\
		\M=D\n\
		\@SP\n\
		\M=M+1\n"

		val n = Int.toString i

		fun aux seg index = "@" ^ seg ^ "\n\
		\D=M\n\
		\@" ^ index ^ "\n\
		\A=D+A\n\
		\D=M\n" ^ putDRegisterInTheStack

		fun auxPointer seg = "@" ^ seg ^ "\n\
		\D=M\n" ^ putDRegisterInTheStack

		fun auxStaticTemp n x = "@" ^ Int.toString (n + x) ^ "\n\
		\D=M\n" ^ putDRegisterInTheStack
	in
	case seg of
		Constant => "@" ^ n ^ "\n\
		\D=A\n" ^ putDRegisterInTheStack
	  | Argument => aux "ARG" n
	  | Local => aux "LCL" n
	  | Static => auxStaticTemp i 16
	  | This => aux "THIS" n
	  | That => aux "THAT" n
	  | Pointer => (case i of
					   0 => auxPointer "THIS"
					 | 1 => auxPointer "THAT"
					 | _ => raise invalidPointerValue)
	  | Temp => auxStaticTemp i 5
	end
#+end_src

#+RESULTS:
: val writePush = fn : segment -> index -> string

*** write pop  fn : segment -> index -> string

#+begin_src sml
fun writePop seg (Index i) =
	let
		val stackValueIntoDRegister = "@SP\n\
		\AM=M-1\n\
		\D=M\n"

		val n = Int.toString i

		fun aux seg index = "@" ^ seg ^ "\n\
		\D=M\n\
		\@" ^ index ^ "\n\
		\D=D+A\n\
		\@" ^ seg ^ index ^ "\n\
		\M=D\n" ^ stackValueIntoDRegister ^
		"@" ^ seg ^ index ^ "\n\
		\A=M\n\
		\M=D\n"

		fun auxPointer seg = stackValueIntoDRegister ^
		"@" ^ seg ^ "\n\
		\M=D\n"

		fun auxStaticTemp n x = stackValueIntoDRegister ^
		"@" ^ Int.toString (n + x) ^ "\n\
		\M=D\n"
	in
	case seg of
		Argument => aux "ARG" n
	  | Local => aux "LCL" n
	  | Static => auxStaticTemp i 16
	  | Constant => raise pushConstantError
	  | This => aux "THIS" n
	  | That => aux "THAT" n
	  | Pointer => (case i of
					   0 => auxPointer "THIS"
					 | 1 => auxPointer "THAT"
					 | _ => raise invalidPointerValue)
	  | Temp => auxStaticTemp i 5
	end
#+end_src

#+RESULTS:
: val writePop = fn : segment -> index -> string

*** main function  fn : stackop * segment * index -> string

#+begin_src sml
fun writeStackMemOp s =
	case s of
		(Push, seg, ind) => writePush seg ind
	  | (Pop, seg, ind) => writePop seg ind
#+end_src

#+RESULTS:
: val writeStackMemOp = fn : stackop * segment * index -> string

** write arithmetic and logical operations 

#+begin_src sml
 (* n é o número de linhas no código										  *)
fun writeLogArith operation n =
	let
		fun auxU s = "@SP\n\
		\A=M\n\
		\A=A-1\n\
		\M="^ s ^"\n"

		fun auxD s = "@SP\n\
		\AM=M-1\n\
		\D=M\n\
		\A=A-1\n" ^ s ^ "\n"

		fun auxC j1 j2 n =
			let
				val k = Int.toString n
			in
		"@SP\n\
		\A=M\n\
		\A=A-1\n\
		\D=M\n\
		\A=A-1\n\
		\D=M-D\n\
		\@SP\n\
		\M=M-1\n\
		\M=M-1\n\
		\@" ^ filename ^ "." ^ k ^ "A\n\
		\D;" ^ j1 ^ "\n\
		\@" ^ filename ^ "." ^ k ^ "B\n\
		\D;" ^ j2 ^ "\n\
		\(" ^ filename ^ "." ^ k ^ "A)\n\
		\@SP\n\
		\A=M\n\
		\M=-1\n\
		\@" ^ filename ^ "." ^ k ^ "\n\
		\0;JMP\n\
		\(" ^ filename ^ "." ^ k ^ "B)\n\
		\@SP\n\
		\A=M\n\
		\M=0\n\
		\(" ^ filename ^ "." ^ k ^ ")\n\
		\@SP\n\
		\M=M+1\n"
			end
	in
	case operation of
		Add => auxD "M=D+M"
	  | Sub => auxD "M=M-D"
	  | And => auxD "M=M&D"
	  | Or => auxD "M=M|D"
	  | Eq => auxC "JEQ" "JNE" n
	  | Gt => auxC "JGT" "JLE" n
	  | Lt => auxC "JLT" "JGE" n
	  | Not => auxU "!M"
	  | Neg => auxU "-M"
	end

#+end_src

#+RESULTS:
: val writeLogArith = fn : arithmlogi -> int -> string

** ☛ TODO write function operations fn : functionOp -> string
depende das funções de memória  writeStackMemOp
- consertar o nome das variáveis
- diminuir um pouco o tamanho dessa função

#+begin_src sml
fun writeFunctionOps fop =
	let
		val putDRegisterInTheStack = "@SP\n\
		\A=M\n\
		\M=D\n\
		\@SP\n\
		\M=M+1\n"

		val stackValueIntoDRegister = "@SP\n\
		\AM=M-1\n\
		\D=M\n"

		fun pushFunctionStack seg =
			"@" ^ seg ^ "\n\
			\D=A\n" ^ putDRegisterInTheStack 
										 
		fun initializeArgs n = writeStackMemOp (Push, Constant, Index 0)
							   (* (writeStackMemOp (Pop, Local, Index n)) *)

		val concatenateList = foldr (fn (x, y) => x ^ y) ""
		(* TODO 		    *)
		val returnAddress = "placeholder"

		fun restoreStack (seg, k) = "@FRAME\n\
		\D=M\n\
		\@" ^ k ^ "\n\
		\A=D-A\n\
		\D=M\n\
		\@" ^ seg ^ "\n\
		\M=D\n"

		val functionStack = [returnAddress, "LCL", "ARG", "THIS", "THAT"]

		val restoreSegments = rev (tl functionStack)

		val restoreOffset = ["1", "2", "3", "4"]

		val restorePairs = ListPair.zip (restoreSegments, restoreOffset)
	in
	case fop of
		Declaration (Name fname, Localargs k) => "(" ^ fname ^ ")\n\
		\" ^ concatenateList (List.tabulate (k, initializeArgs))
	  | Call (Name fname, Localargs k) => concatenateList
											 (map pushFunctionStack functionStack) ^ 
	  "@SP\n\
	  \D=M\n\
	  \@5\n\
	  \D=D-A\n\
	  \@" ^ Int.toString k ^ "\n\
	  \D=D-A\n\
	  \@ARG\n\
	  \M=D\n\
	  \@SP\n\
	  \D=M\n\
	  \@LCL\n\
	  \M=D\n\
	  \@" ^ fname ^ "\n\
	  \0;JMP\n\
	  \(" ^ returnAddress ^ ")\n"
	  | Return => "@LCL\n\
	  \D=M\n\
	  \@FRAME\n\
	  \M=D\n\
	  \@5\n\
	  \A=D-A\n\
	  \D=M\n\
	  \@RET\n\
	  \M=D\n" ^ stackValueIntoDRegister ^ "@ARG\n\
	  \A=M\n\
	  \M=D\n\
	  \@ARG\n\
	  \D=M\n\
	  \D=M+1\n\
	  \@SP\n\
	  \M=D\n" ^ concatenateList (map restoreStack restorePairs)  ^
	  "@RET\n\
	  \A=M\n\
	  \0;JMP\n"
	end

#+end_src

#+RESULTS:
: [autoloading]
: [autoloading done]
: val writeFunctionOps = fn : functionOp -> string

** ⚑ ESPERANDO main function
também está faltando implementar o contador de variáveis

#+begin_src sml
fun codeWriter line n =
	case line of
		Operation f => writeLogArith f n
	  | Memory s => writeStackMemOp s
	  | Labelop lop => writeLabelops lop
	  | FunctionCommand fop => writeFunctionOps fop
	  | Empty => "\n"

val getOperation = operation o remCommGetTokens

fun getLineWriteCode s n = codeWriter (getOperation s) n

#+end_src

#+RESULTS:
: val codeWriter = fn : line -> int -> string
: val getOperation = fn : string -> line
: val getLineWriteCode = fn : string -> int -> string

* ⚑ ESPERANDO read stream, write stream
- o esquema que está ali em cima é uma lista de arquivos .vm
- falta mexer em algumas coisas, passar o número de variáveis criadas
  até então ao invés do número de linhas

#+begin_src sml
fun readfile (input, output) =
	let
		val instream = TextIO.openIn input
		val outstream = TextIO.openOut output
		val readline = TextIO.inputLine instream
		fun aux readline n =
			case readline of
				NONE => (TextIO.closeIn instream; TextIO.closeOut outstream)
			  | SOME s => (TextIO.output(outstream, (getLineWriteCode s n)); aux (TextIO.inputLine instream) (n + 1))
	in
		aux readline 0
	end

#+end_src

#+RESULTS:
: [autoloading]
: [autoloading done]
: val readfile = fn : string * string -> unit
#+begin_src sml
(* val outstream = TextIO.openOut output *)
fun readFileList (x::xs) n outstream =	
	let
		val part = readFileList xs n
		val instream = TextIO.openIn x
		val readline = TextIO.inputLine instream
		fun aux readline n function =
			case readline of
				NONE => (TextIO.closeIn instream; function outstream)
			  | SOME s => (TextIO.output(outstream, (getLineWriteCode s n));
						 aux (TextIO.inputLine instream) (n + 1) (fn s => ()))
	in
	case xs of
		[] => (aux readline n TextIO.closeOut)
	  | _ => (aux readline n part)
	end

#+end_src

#+RESULTS:
: stdIn:963.5-977.5 Warning: match nonexhaustive
:           (x :: xs,n,outstream) => ...
:   
: val readFileList = fn : string list -> int -> TextIO.outstream -> unit


* ☛ TODO exit success
adicionar a output com o path correto
mexer na primeira função pra ficar melhor

#+begin_src sml
val filePath = hd (String.tokens (fn x => x = #".") (hd args))
(* val _ print hd parsedDirPathArgs *)
val _ = readfile ((hd args), filePath ^ ".asm")
(* val _ = OS.Process.exit(OS.Process.success) *)
#+end_src

#+RESULTS:
: locallocalargumentargumentval filePath =
:   "/home/sean/nand2tetris/projects/08/FunctionCalls/SimpleFunction/Simple#"
:   : string

