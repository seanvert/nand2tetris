#+PROPERTY: header-args:python :session a :results output :tangle assembler.py 

* imports

#+begin_src python
import sys
import re
#+end_src

#+RESULTS:

* predef

#+begin_src python
predef_symbols = {
    "SP" : 0,
    "LCL" : 1,
    "ARG" : 2,
    "THIS" : 3,
    "THAT" : 4,
    "R0" : 0,
    "R1" : 1,
    "R2" : 2,
    "R3" : 3,
    "R4" : 4,
    "R5" : 5,
    "R6" : 6,
    "R7" : 7,
    "R8" : 8,
    "R9" : 9,
    "R10" : 10,
    "R11" : 11,
    "R12" : 12,
    "R13" : 13,
    "R14" : 14,
    "R15" : 15,
    "SCREEN" : 16384,
    "KBD" : 24576
}

dest = {
    "null" : 0b000,
    "M" : 0b001,
    "D" : 0b010,
    "MD" : 0b011,
    "A" : 0b100,
    "AM" : 0b101,
    "AD" : 0b110,
    "AMD" : 0b111
}

jump = {
    "null" : 0b000,
    "JGT" : 0b001,
    "JEQ" : 0b010,
    "JGE" : 0b011,
    "JLT" : 0b100,
    "JNE" : 0b101,
    "JLE" : 0b110,
    "JMP" : 0b111
}

comp = {
    "0" : 0b0101010,
    "1" : 0b0111111,
    "-1" : 0b0111010,
    "D" : 0b0001100,
    "A" : 0b0110000,
    "!D" : 0b0001101,
    "!A" : 0b0110001,
    "-D" : 0b0001111,
    "-A" : 0b0110011,
    "D+1" : 0b0011111,
    "A+1" : 0b0110111,
    "D-1" : 0b0001110,
    "A-1" : 0b0110010,
    "D+A" : 0b0000010,
    "D-A" : 0b0010011,
    "A-D" : 0b0000111,
    "D&A" : 0b0000000,
    "D|A" : 0b0010101,
    "M" : 0b1110000,
    "!M" : 0b1110001,
    "-M" : 0b1110011,
    "M+1" : 0b1110111,
    "M-1" : 0b1110010,
    "D+M" : 0b1000010,
    "D-M" : 0b1010011,
    "M-D" : 0b1000111,
    "D&M" : 0b1000000,
    "D|M" : 0b1010101
}
#+end_src

#+RESULTS:

* assembler
* ✓ PRONTO parser

#+begin_src python 
class Parser(object):
    def __init__(self, path):
        self.asm = open(path, "r")
        self.current_line = ''
        self.end = False
        # regular expessions
        self.Commentreg = re.compile (r'^\/\/')
        self.Lreg = re.compile(r'\([A-z0-9_.$:]+\)')
        self.Areg = re.compile(r'@[A-z0-9_.$:]+')
        self.Creg = re.compile(r'^[A-Z]{0,3}(=)?[|&!\-+A-Z0-9]{1,3}(;)?(J[A-Z]{2})?')
        self.Destreg = re.compile(r'^[A-Z]{0,3}=')
        self.Jumpreg = re.compile(r';[A-Z]{3}')
        self.Compreg = re.compile(r'=|;')

    def hasMoreCommands(self):
        if self.end:
            return False
        else:
            return self.asm.readable()

    def advance(self):
        self.current_line = self.asm.readline()
        if self.current_line == '':
            self.end = True
        
    def commandType(self):
        if self.Commentreg.match(self.current_line):
            return None
        if self.Areg.match(self.current_line):
            return "A_COMMAND"
        elif self.Lreg.match(self.current_line):
            return "L_COMMAND"
        elif self.Creg.match(self.current_line):
            return "C_COMMAND"
        else:
            pass

    def symbol(self):
        if self.commandType() == "A_COMMAND":
            return self.Areg.match(self.current_line).group(0)[1:]
        else:
            return self.Lreg.match(self.current_line).group(0)[1:-1]

    def dest(self):
        try:
            return self.Destreg.match(self.current_line).group(0)[:-1]
        except:
            return None

    def comp(self):
        self.comp = self.Compreg.split(self.current_line)
        if self.dest():
            return self.comp[1]
        elif self.jump():
            return self.comp[0]
        else:
            return self.comp[0]
            
    def jump(self):
        try:
            return self.Jumpreg.match(self.current_line).group(0)[1:]
        except:
            return None

#+end_src

#+RESULTS:

** ✓ PRONTO hasMoreCommands
returns Boolean

** ✓ PRONTO advance
f.readline
This makes the return value unambiguous; if f.readline() returns an empty string, the end of the file has been reached, while a blank line is represented by '\n', a string containing only a single newline.

>>>
>>> f.readline()
'This is the first line of the file.\n'
>>> f.readline()
'Second line of the file\n'
>>> f.readline()
''

** ✓ PRONTO commandType
returns A_COMMAND, C_COMMAND, L_COMMAND

^\@[a-zA-Z.$:_]+



^\(.+\)$

** ✓ PRONTO symbol
returns string

** ✓ PRONTO dest
returns string

** ✓ PRONTO comp
returns string

** ✓ PRONTO jump
returns string

* ✓ PRONTO code
#+begin_src python
class Code(object):
    def __init__(self, destdic=dest, compdic=comp, jumpdic=jump):
        self.destdic = destdic
        self.compdic = compdic
        self.jumpdic = jumpdic

    def dest(self, mnemonic):
        return self.destdic[mnemonic]

    def comp(self, mnemonic):
        return self.compdic[mnemonic]

    def jump(self, mnemonic):
        return self.jumpdic[mnemonic]
#+end_src

#+RESULTS:

** ✓ PRONTO dest
gets mnemonic (str)
returns 3 bits
** ✓ PRONTO comp
gets mnemonic (str)
returns 7 bits
** ✓ PRONTO jump
gets mnemonic (str)
returns 3 bits
* ⚑ ESPERANDO symbol table
#+begin_src python
class SymbolTable(object):
    def __init__(self):
        pass

    def addEntry(self):
        pass

    def contains(self):
        pass

    def GetAddress(self):
        pass
#+end_src

#+RESULTS:

** ⚑ ESPERANDO constructor
creates an empty table
** ⚑ ESPERANDO addEntry
gets symbol (str) and address (int)

** ⚑ ESPERANDO contains
gets symbol (str)
returns Boolean
** ⚑ ESPERANDO GetAddress
gets symbol (str)
returns int
* main
#+begin_src python
def main():
    c = Code()
    p = Parser("/home/sean/nand2tetris/projects/06/add/Add.asm")
    for i in range(10):
        p.current_line
        p.advance()
    
if __name__=='__main__':
    main()
#+end_src

#+RESULTS:

